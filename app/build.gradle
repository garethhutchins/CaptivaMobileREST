apply plugin: 'com.android.application'


dependencies {
    // This is the dependency that utilizes the Captiva Mobile SDK.
    implementation files('libs/gson-2.6.2.jar')
    implementation files('libs/volley.jar')
    //compile files('libs/android-support-v7-appcompat.jar')
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:support-v4:28.0.0'
    implementation 'com.android.support:design:28.0.0'
    implementation 'com.android.support:recyclerview-v7:28.0.0'
    implementation project(path: ':captivamobilesdk')
}

// This is required to compile AAR files from the libs folder.
repositories {
    flatDir {
        dirs 'libs'
    }
}

android {
    // This represents the API version of Android that is being compiled against.  It can be as
    // low as the API requirement of the highest feature in the code.  It does affect the Java
    // language version though... so if a later/current Java language version is required, use a
    // more current SDK version.
    compileSdkVersion 28
    // Note that the build tools version supports a lesser compiler version.
    buildToolsVersion '28.0.3'
    defaultConfig {
        applicationId 'captiva.mobile.rest'
        // Bumped the minimum to API 16 (Jelly Bean). API 16 captures 88% of Android users as of July 2015.
        minSdkVersion 19

        // This is the highest version that the code has been tested to run on.  The code will run
        // on higher versions, but this is the version that has been tested/certified as the target.
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
    }

    // We will want to use the same keystore from the old to new version of the application so
    // that upgrades are possible (instead of a side-by-side installation).
    signingConfigs {
        release {
            storeFile file('captiva_mobile-release.keystore')
            keyAlias 'captiva_mobile'
            storePassword 'captivamobilepreleasekeystorepassword'
            keyPassword 'captivamobilepreleasekeystorepassword'
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            // Get rid of linter 'cannot infer argument types' warning with noinspection directive.
            //noinspection GroovyAssignabilityCheck
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // Get rid of linter 'cannot infer argument types' warning with noinspection directive.
            //noinspection GroovyAssignabilityCheck
            signingConfig signingConfigs.release
        }
    }
    productFlavors {
    }
    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }
    dexOptions {
    }
}
